#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        scroll_screenshot: scroll_screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_1))>;
            label = "SCROLL_SCREENSHOT";
        };

        text_screenshot: text_screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_2))>;
            label = "TEXT_SCREENSHOT";
        };

        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_3))>;
            label = "SCREENSHOT";
        };

        left_half: left_half {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(LEFT)))>;
            label = "LEFT_HALF";
        };

        next_screen: next_screen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(UP)))>;
            label = "NEXT_SCREEN";
        };

        right_screen: right_screen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(RIGHT)))>;
            label = "RIGHT_SCREEN";
        };

        one_third: one_third {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(LEFT))>;
            label = "ONE_THIRD";
        };

        two_third: two_third {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(RIGHT))>;
            label = "TWO_THIRD";
        };

        full_screen: full_screen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(M)))>;
            label = "FULL_SCREEN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "Base";
            bindings = <
&kp ESC     &kp Q  &kp W  &kp E     &kp R     &kp T                     &kp UP                &kp Y  &kp U      &kp I      &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D     &kp F     &kp G           &kp LEFT  &kp ENTER  &kp RIGHT  &kp H  &kp J      &kp K      &kp L    &kp NUHS  &kp RET
&kp LSHIFT  &kp Z  &kp X  &kp C     &kp V     &kp B  &none              &kp DOWN              &kp N  &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                          &kp LALT  &kp LGUI  &mo 1                                           &mo 2  &kp SPACE  &kp LCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        meta_layer {
            display-name = "Meta";
            bindings = <
&rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &scroll_screenshot  &text_screenshot  &screenshot    &bt BT_CLR_ALL                           &none                         &kp RA(N8)  &kp LS(N8)        &kp RA(N7)     &kp LS(N9)       &kp RA(N9)        &kp DELETE
&kp CAPSLOCK     &rgb_ug RGB_BRI  &left_half          &next_screen      &right_screen  &bt BT_SEL 0             &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp RA(N5)  &kp LS(NUMBER_2)  &kp LS(N0)     &kp EQUAL        &kp RA(NUMBER_6)  &none
&kp LSHIFT       &rgb_ug RGB_BRD  &one_third          &full_screen      &two_third     &bt BT_SEL 1    &none                    &none                         &kp LS(N5)  &kp LS(NUMBER_1)  &kp LS(MINUS)  &kp KP_MULTIPLY  &kp KP_PLUS       &kp RIGHT_SHIFT
                                                      &kp LEFT_ALT      &kp LEFT_GUI   &none                                                                  &none       &kp SPACE         &kp RCTRL
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        function_layer {
            display-name = "Function";
            bindings = <
&none       &none      &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &kp NUMBER_0                               &mmv MOVE_UP                     &kp RA(N)         &kp RA(E)         &kp RA(L)       &kp MINUS   &kp LEFT_BRACKET  &kp BSPC
&none       &none      &kp NUMBER_4  &kp NUMBER_5   &kp NUMBER_6  &none                      &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT          &kp DOWN          &kp UP          &kp RIGHT   &kp SEMI          &none
&kp LSHIFT  &kp GRAVE  &kp NUMBER_7  &kp NUMBER_8   &kp NUMBER_9  &none         &mkp RCLK                    &mmv MOVE_DOWN                   &kp LS(NUMBER_4)  &kp LS(NUMBER_6)  &kp RA(LS(N7))  &kp LS(N7)  &kp SINGLE_QUOTE  &kp RIGHT_SHIFT
                                     &kp RIGHT_ALT  &kp LEFT_GUI  &kp LCTRL                                                                   &none             &kp SPACE         &none
            >;

            sensor-bindings = <&inc_dec_kp LG(KP_PLUS) LG(KP_MINUS)>;
        };
    };
};
