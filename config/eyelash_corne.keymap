#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "Base";
            bindings = <
&kp ESC     &kp Q  &kp W  &kp E     &kp R     &kp T                               &kp UP                &kp Y        &kp U      &kp I      &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D     &kp F     &kp G                     &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &kp J      &kp K      &kp L    &kp NUHS  &kp RET
&kp LSHIFT  &kp Z  &kp X  &kp C     &kp V     &kp B        &kp SPACE              &kp DOWN              &kp N        &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                          &kp LALT  &kp LGUI  &lt 1 SPACE                                               &lt 2 ENTER  &kp SPACE  &kp LCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        meta_layer {
            display-name = "Meta";
            bindings = <
&rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &kp N2  &kp N3        &kp N4        &bt BT_CLR_ALL                           &none                         &kp RA(N8)  &kp LS(N8)        &kp RA(N7)     &kp LS(N9)       &kp RA(N9)        &kp BSPC
&kp CAPSLOCK     &rgb_ug RGB_BRI  &none   &none         &none         &bt BT_SEL 0             &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp RA(N5)  &kp LS(NUMBER_2)  &kp LS(N0)     &kp EQUAL        &kp RA(NUMBER_6)  &none
&kp LSHIFT       &rgb_ug RGB_BRD  &none   &none         &none         &bt BT_SEL 1    &none                    &none                         &kp LS(N5)  &kp LS(NUMBER_1)  &kp LS(MINUS)  &kp KP_MULTIPLY  &kp KP_PLUS       &kp RIGHT_SHIFT
                                          &kp LEFT_ALT  &kp LEFT_GUI  &none                                                                  &none       &kp SPACE         &kp RCTRL
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans     &trans     &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
